<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[无聊的测试结果]]></title>
    <url>%2F2019%2F09%2F23%2F%E6%97%A0%E8%81%8A%E7%9A%84%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[IPv4 地址 . . . . . . . . . . . . : 192.168.1.118(首选) 子网掩码 . . . . . . . . . . . . : 255.255.255.0 获得租约的时间 . . . . . . . . . : 2019年9月23日 22:30:18 租约过期的时间 . . . . . . . . . : 2019年9月24日 0:30:02 默认网关. . . . . . . . . . . . . : 192.168.1.168 DHCP 服务器 . . . . . . . . . . . : 192.168.1.168 0.0.0.0255.255.255.255子网地址子网广播地址127.0.0.0127.0.0.1127.0.0.10127.255.255.255正在 Ping 0.0.0.0 具有 32 字节的数据: PING：传输失败。常见故障。 PING：传输失败。常见故障。 PING：传输失败。常见故障。 PING：传输失败。常见故障。 0.0.0.0 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)， Ping 请求找不到主机 255.255.255.255。请检查该名称，然后重试。 正在 Ping 192.168.1.0 具有 32 字节的数据: 来自 192.168.1.118 的回复: 无法访问目标主机。 来自 192.168.1.118 的回复: 无法访问目标主机。 来自 192.168.1.118 的回复: 无法访问目标主机。 来自 192.168.1.118 的回复: 无法访问目标主机。 192.168.1.0 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 正在 Ping 192.168.1.255 具有 32 字节的数据: 请求超时。 请求超时。 请求超时。 请求超时。 192.168.1.255 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)， 正在 Ping 127.0.0.0 具有 32 字节的数据: 一般故障。 一般故障。 一般故障。 一般故障。 127.0.0.0 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)， 正在 Ping 127.0.0.1 具有 32 字节的数据: 来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=128 来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=128 来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=128 来自 127.0.0.1 的回复: 字节=32 时间&lt;1ms TTL=128 127.0.0.1 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 往返行程的估计时间(以毫秒为单位): 最短 = 0ms，最长 = 0ms，平均 = 0ms 正在 Ping 127.0.0.10 具有 32 字节的数据: 来自 127.0.0.10 的回复: 字节=32 时间&lt;1ms TTL=128 来自 127.0.0.10 的回复: 字节=32 时间&lt;1ms TTL=128 来自 127.0.0.10 的回复: 字节=32 时间&lt;1ms TTL=128 来自 127.0.0.10 的回复: 字节=32 时间&lt;1ms TTL=128 127.0.0.10 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 往返行程的估计时间(以毫秒为单位): 最短 = 0ms，最长 = 0ms，平均 = 0ms 正在 Ping 127.255.255.255 具有 32 字节的数据: 请求超时。 请求超时。 请求超时。 请求超时。 127.255.255.255 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)，]]></content>
      <tags>
        <tag>TCP/IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Wireshark抓包使用指南]]></title>
    <url>%2F2019%2F09%2F14%2Fwireshark%E6%8A%93%E5%8C%85%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[作为一款高效免费的抓包工具，wireshark可以捕获并描述网络数据包，其最大的优势就是免费、开源以及多平台支持，在GNU通用公共许可证的保障范围下，用户可以免费获取软件和代码，并拥有对其源码修改和定制的权利，如今其已是全球最广泛的网络数据包分析软件之一。 0x01.Wireshark可以做什么 网络管理员使用Wireshark检测网络问题 网安工程师用Wireshark检查信息安全相关问题 开发者使用Wireshark为新的通信协议调试 普通用户使用Wireshark学习网络协议相关知识 憨憨学生使用Wireshark应付TCP/IP课程要求 0x02.Wireshark不可以做什么 Wireshark不是入侵侦测软件（Intrusion Detection Software, IDS）。对于网络上的异常流量行为，Wireshark不会产生警示或是任何提示。然而，仔细分析Wireshark截取的数据包能够帮助用户对于网络行为有更清楚的了解。 Wireshark不会对网络数据包产生内容的修改 - 它只会反映出当前流通的数据包信息。 Wireshark本身也不会提交数据包至网络上。就是说你只能查看数据包，不能修改或转发。 0x03.哪里下载开源软件请去它的官网下载 wireshark下载完成后一路next，如果win10系统选择抓包但不显示网卡，需要下载win10pcap兼容性安装包 0x04.第一个抓包实例 打开wireshark 3.0.4，主界面如下： 选择菜单栏上捕获——&gt;选项，，取消混杂模式，勾选WLAN，开始(你也可以直接双击上图的WLAN开始) 此时wireshark已经开始工作，查看抓包 打开cmd窗口，执行ping jinhuaixin.cn 工作中的wireshark将抓取到相关数据包，在过滤栏设置过滤条件以避免其他无用数据包影响分析，比如：ip.addr == 185.199.111.153 and icmp表示只显示ICPM协议且源主机IP或者目的主机IP为185.199.111.153的数据包。 说明：协议名称icmp要小写 0x05.Wireshark抓包界面介绍 0x06.数据包详细信息各行信息分别为 Frame: 物理层的数据帧概况 Ethernet II: 数据链路层以太网帧头部信息 Internet Protocol Version 4: 互联网层IP包头部信息 Transmission Control Protocol: 传输层T的数据段头部信息，此处是TCP Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议 0x07.TCP包的具体内容从下图可以看到wireshark捕获到的TCP包中的每个字段。 0x08.wireshark过滤器表达式的规则抓包过滤器语法和实例 抓包过滤器类型Type（host、net、port）、方向Dir（src、dst）、协议Proto（ether、ip、tcp、udp、http、icmp、ftp等）、逻辑运算符（&amp;&amp; 与、|| 或、！非） （1）协议过滤 比较简单，直接在抓包过滤框中直接输入协议名即可。 tcp，只显示TCP协议的数据包列表 http，只查看HTTP协议的数据包列表 icmp，只显示ICMP协议的数据包列表 （2）IP过滤 host 192.168.1.104 src host 192.168.1.104 dst host 192.168.1.104 （3）端口过滤 port 80 src port 80 dst port 80 （4）逻辑运算符&amp;&amp; 与、|| 或、！非 src host 192.168.1.104 &amp;&amp; dst port 80 抓取主机地址为192.168.1.80、目的端口为80的数据包 host 192.168.1.104 || host 192.168.1.102 抓取主机为192.168.1.104或者192.168.1.102的数据包 ！broadcast 不抓取广播数据包 2、显示过滤器语法和实例（1）比较操作符 比较操作符有== 等于、！= 不等于、&gt; 大于、&lt; 小于、&gt;= 大于等于、&lt;=小于等于。 （2）协议过滤 比较简单，直接在Filter框中直接输入协议名即可。注意：协议名称需要输入小写。 tcp，只显示TCP协议的数据包列表 http，只查看HTTP协议的数据包列表 icmp，只显示ICMP协议的数据包列表 （3） ip过滤 ip.src ==192.168.1.104 显示源地址为192.168.1.104的数据包列表 ip.dst==192.168.1.104, 显示目标地址为192.168.1.104的数据包列表 ip.addr == 192.168.1.104 显示源IP地址或目标IP地址为192.168.1.104的数据包列表 （4）端口过滤 tcp.port ==80, 显示源主机或者目的主机端口为80的数据包列表。 tcp.srcport == 80, 只显示TCP协议的源主机端口为80的数据包列表。 tcp.dstport == 80，只显示TCP协议的目的主机端口为80的数据包列表。 （5） Http模式过滤 http.request.method==”GET”, 只显示HTTP GET方法的。 （6）逻辑运算符为 and/or/not 过滤多个条件组合时，使用and/or。比如获取IP地址为192.168.1.104的ICMP数据包表达式为ip.addr == 192.168.1.104 and icmp （7）按照数据包内容过滤。假设我要以IMCP层中的内容进行过滤，可以单击选中界面中的码流，在下方进行选中数据。右键–&gt;准备过滤器–&gt;选中–&gt;添加条件表达式，如data contains &quot;uestc&quot; 0x09.Wireshark分析TCP协议三次握手TCP三次握手连接建立过程第一次握手第二次握手第三次握手 第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手，客户端与服务器开始传送数据。 wireshark抓取访问指定服务器数据包 启动wireshark抓包，打开浏览器输入www.cnblogs.com 终止抓包，输入http过滤 隐藏其他无关http数据包，右键选中，追踪流——&gt;TCP流，显示握手信息，如图所示：可以看到这里截获了三个握手数据包，第四个是HTTP数据包，说明HTTP的确是使用TCP建立连接的。第一次，客户端发送了一个TCP，标志位为SYN，序列号为0，表示客户端请求建立连接，如下：关键参数 SYN ：标志位，表示请求建立连接 Seq = 0 ：初始建立连接值为0，数据包的相对序列号从0开始，表示当前还没有发送数据 Ack = 0：初始建立连接值为0，已经收到包的数量，表示当前没有接收到数据第二次，服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的ISN加1以.即0+1=1, 如下图如下：关键参数 [SYN + ACK]: 标志位，同意建立连接，并回送SYN+ACK Seq = 0 ：初始建立值为0，表示当前还没有发送数据 Ack = 1：表示当前端成功接收的数据位数，虽然客户端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位。（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据）第三次，客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1，如下图如下：关键参数 ACK ：标志位，表示已经收到记录 Seq = 1 ：表示当前已经发送1个数据 Ack = 1 : 表示当前端成功接收的数据位数，虽然服务端没有发送任何有效数据，确认号还是被加1，因为包含SYN或FIN标志位（并不会对有效数据的计数产生影响，因为含有SYN或FIN标志位的包并不携带有效数据)。 0x0a.其他调整时间戳1View --&gt;Time Display Format --&gt; Date and Time of Day 参考文档https://www.cnblogs.com/linyfeng/p/9496126.htmlhttp://www.zhoulujun.cn/html/theory/network/2016_1130_7908.html]]></content>
  </entry>
  <entry>
    <title><![CDATA[基于CC2530在Nokia5510上显示DHT11数据]]></title>
    <url>%2F2019%2F07%2F16%2F%E5%9F%BA%E4%BA%8ECC2530%E5%9C%A8Nokia5510%E4%B8%8A%E6%98%BE%E7%A4%BADHT11%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[各部分代码head1.h 123456#include &lt;ioCC2530.h&gt;#define uchar unsigned char#define uint unsigned intvoid delay_us(uint time);uchar uchardata(uchar *data); LCD3310.h 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224/******************************************************************************* ** ********** ** ************ ** *** *** ** *** ++ *** ** *** + + *** CHIPCON ** *** + ** *** + + *** ** *** ++ *** ** *** *** ** ************ ** ********** ** ********************************************************************************Filename: lcd.hTarget: cc2430Author: KJARevised: 16/12-2005Revision: 1.0Description:Function declarations for common LCD functions for use with the SmartRF04EB.All functions defined here are implemented in lcd.c.******************************************************************************///#include "hal.h"#include "hal_types.h"#ifndef LCD3310_H#define LCD3310_H#define LINE_SIZE 14 // Line length of LCD#define LINE1_ADDR 0x80 // Upper line of LCD#define LINE2_ADDR 0xC0 // Lower line of LCD#define CHAR1_ADDRESS 0x08#define LINE1 2#define LINE2 3#define CLEARLY_VISIBLE 1#define BEARLY_VISIBLE 0//symbol codes#define ARROW_LEFT 124#define ARROW_RIGHT 125#define ARROW_UP 126#define ARROW_DOWN 127/******************************************************************************* LCD** See lcd.h for lcd fuctions******************************************************************************/#define LCD_DC P1_2#define LCD_SDA P1_3#define LCD_SCL P1_4#define LCD_CE P1_1/******************************************************************************* @fn initLcd** @brief Setup I/O, configure display and clear LCD.** Parameters:** @param void** @return void*******************************************************************************/void initLcd(void);/******************************************************************************* @fn lcdUpdate** @brief* This function converts the two text strings from ASCII to the character* set used by the LCD display.** Parameters:** @param char* pLine1* Pointer to text string to be written to line 1* @param char* pLine2* Pointer to text string to be written to line 2** @return void*******************************************************************************/void lcdUpdate(char *pLine1, char *pLine2);/******************************************************************************* @fn lcdUpdateLine** @brief Write one line of text to LCD.** Parameters:** @param UINT8 line* LINE1 or LINE2* @param char* line_p* pointer to text to be written to _line_** @return void*******************************************************************************/void lcdUpdateLine(uint8 line, char *line_p);/******************************************************************************* @fn lcdUpdateChar** @brief Write a single character to LCD.** Parameters:** @param UINT8 line* LINE1 or LINE2* @param UINT8 position* position to update, range between 0 and 15* @param char c* character to write, convert an ascii value to corresponding* symbol on LCD** @return void*******************************************************************************/void lcdUpdateChar(uint8 line, uint8 position, char c);/******************************************************************************* @fn lcdUpdateSymbol** @brief Write a single symbol to LCD.** Parameters:** @param UINT8 line* LINE1 or LINE2* @param UINT8 position* position to update, between 0 and 15* @param char c* symbol to write, do not convert an ascii value to* corresponding symbol on LCD** @return void*******************************************************************************/void lcdUpdateSymbol(uint8 line, uint8 position, char c);/******************************************************************************* @fn initNewSymbol** @brief initialize a new symbol on the specified address in LCD RAM** Parameters:** @param char* symbol* Symbol to intialize* @param BYTE address* address to store the symbol** @return void*******************************************************************************///void initNewSymbol(char* symbol, BYTE address);/******************************************************************************* @fn waitVisible** @brief Wait for characters to become visible.** Parameters:** @param BOOL visibility* CLEARLY_VISIBLE* BEARLY_VISIBLE** @return void*******************************************************************************/void waitVisible(uint8 visibility);/******************************************************************************* @fn scrollText** @brief Scroll a string over lower line of LCD.** Parameters:** @param char* string* Text to show* @param UINT8 length* Length of _string_** @return void*******************************************************************************/void scrollText(char *string, uint8 length);void ShowHz16(unsigned char Y,unsigned char X,unsigned char *address);void LCD_write_english_string(unsigned char X,unsigned char Y,char *s ,unsigned char len);void LCD_draw_bmp_pixel(unsigned char X,unsigned char Y,unsigned char *map, unsigned char Pix_x,unsigned char Pix_y);void Delay_nms(unsigned int Time);void LCD_write_english_string_n(unsigned char X,unsigned char Y,char *s);void LCD_clear(void);void LCD_write_char(unsigned char c);#endif LCD3310.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424/******************************************************************************Filename: lcd.cTarget: cc2430Author: KJARevised: 16/12-2005Revision: 1.0Description:Function implementations for common LCD functions for use with the SmartRF04EB.******************************************************************************/#include "ioCC2530.h"#include "LCD3310.h"// protos/**************************************/// english_6x8_pixel// 6 x 8 font// 1 pixel space at left and bottom// index = ASCII - 32__code const unsigned char font6x8[][6] =&#123; &#123; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 &#125;, // sp 0 &#123; 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 &#125;, // ! 1 &#123; 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 &#125;, // " 2 &#123; 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 &#125;, // # 3 &#123; 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 &#125;, // $ 4 &#123; 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 &#125;, // % 5 &#123; 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 &#125;, // &amp; 6 &#123; 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 &#125;, // ' 7 &#123; 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 &#125;, // ( 8 &#123; 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 &#125;, // ) 9 &#123; 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 &#125;, // * 10 &#123; 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 &#125;, // + 11 &#123; 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 &#125;, // , 12 &#123; 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 &#125;, // - 13 &#123; 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 &#125;, // . 14 &#123; 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 &#125;, // / 15 &#123; 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E &#125;, // 0 16 &#123; 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 &#125;, // 1 17 &#123; 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 &#125;, // 2 18 &#123; 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 &#125;, // 3 19 &#123; 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 &#125;, // 4 20 &#123; 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 &#125;, // 5 21 &#123; 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 &#125;, // 6 22 &#123; 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 &#125;, // 7 23 &#123; 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 &#125;, // 8 24 &#123; 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E &#125;, // 9 25 &#123; 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 &#125;, // : 26 &#123; 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 &#125;, // ; 27 &#123; 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 &#125;, // &lt; 28 &#123; 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 &#125;, // = 29 &#123; 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 &#125;, // &gt; 30 &#123; 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 &#125;, // ? 31 &#123; 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E &#125;, // @ 32 &#123; 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C &#125;, // A 33 &#123; 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 &#125;, // B 34 &#123; 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 &#125;, // C 35 &#123; 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C &#125;, // D 36 &#123; 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 &#125;, // E 37 &#123; 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 &#125;, // F 38 &#123; 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A &#125;, // G 39 &#123; 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F &#125;, // H 40 &#123; 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 &#125;, // I 41 &#123; 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 &#125;, // J 42 &#123; 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 &#125;, // K 43 &#123; 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 &#125;, // L 44 &#123; 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F &#125;, // M 45 &#123; 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F &#125;, // N 46 &#123; 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E &#125;, // O 47 &#123; 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 &#125;, // P 48 &#123; 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E &#125;, // Q 49 &#123; 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 &#125;, // R 50 &#123; 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 &#125;, // S 51 &#123; 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 &#125;, // T 52 &#123; 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F &#125;, // U 53 &#123; 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F &#125;, // V 54 &#123; 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F &#125;, // W 55 &#123; 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 &#125;, // X 56 &#123; 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 &#125;, // Y 57 &#123; 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 &#125;, // Z 58 &#123; 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 &#125;, // [ 59 &#123; 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 &#125;, // 55 60 &#123; 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 &#125;, // ] 61 &#123; 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 &#125;, // ^ 62 &#123; 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 &#125;, // _ 63 &#123; 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 &#125;, // ' 64 &#123; 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 &#125;, // a 65 &#123; 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 &#125;, // b 66 &#123; 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 &#125;, // c 67 &#123; 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F &#125;, // d 68 &#123; 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 &#125;, // e 69 &#123; 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 &#125;, // f 70 &#123; 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C &#125;, // g 71 &#123; 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 &#125;, // h 72 &#123; 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 &#125;, // i 73 &#123; 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 &#125;, // j 74 &#123; 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 &#125;, // k 75 &#123; 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 &#125;, // l 76 &#123; 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 &#125;, // m 77 &#123; 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 &#125;, // n 78 &#123; 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 &#125;, // o 79 &#123; 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 &#125;, // p 80 &#123; 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC &#125;, // q 81 &#123; 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 &#125;, // r 82 &#123; 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 &#125;, // s 83 &#123; 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 &#125;, // t 84 &#123; 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C &#125;, // u 85 &#123; 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C &#125;, // v 86 &#123; 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C &#125;, // w 87 &#123; 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 &#125;, // x 88 &#123; 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C &#125;, // y 89 &#123; 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 &#125;, // z 90 &#123; 0x00, 0x00, 0xff, 0xff, 0x00, 0x00 &#125;, // || 91 &#123; 0x08, 0x1c, 0x2a, 0x08, 0x08, 0x08 &#125;, // &lt;- 92 &#123; 0x08, 0x08, 0x08, 0x2a, 0x1c, 0x08 &#125;, // -&gt; 94 &#123; 0x04, 0x02, 0xff, 0x02, 0x04, 0x00 &#125;, // up 94 &#123; 0x00, 0x20, 0x40, 0xff, 0x40, 0x20 &#125;, // down 95 &#123; 0x00, 0x01, 0x01, 0xFF, 0x81, 0x81 &#125;, //ADC Series上用的上划线 &#123; 0x00, 0x80, 0x80, 0xFF, 0x80, 0x80 &#125; //ADC Series上用的下划线&#125;;/************ 延时函数 ******************************/void Delay_nms(unsigned int Time) // 延时单位:ms&#123; unsigned int i; unsigned char j; for(i=0;i&lt;Time;i++) &#123; for(j=0;j&lt;123;j++)&#123;&#125; &#125;&#125;/******** 发送一个字节的数据到液晶控制器*************************/void SendByte(unsigned char Data)&#123; unsigned char i; LCD_CE=0; for(i=0;i&lt;8;i++) &#123; if(Data &amp; 0x80) LCD_SDA = 1; else LCD_SDA = 0; Data&lt;&lt;=1; LCD_SCL = 0; LCD_SCL = 1; &#125; LCD_CE=1;&#125;/*-----------------------------------------------------------------------LCD_write_byte : 使用SPI接口写数据到LCD输入参数：data ：写入的数据；command ：写数据/命令选择；编写日期 ：2004-8-10最后修改日期 ：2004-8-13-----------------------------------------------------------------------*/void LCD_write_byte(unsigned char data, unsigned char command)&#123; LCD_CE = 0 ; // 使能LCD if (command == 0) LCD_DC = 0; // 传送命令 else LCD_DC = 1; // 传送数据 SendByte(data); LCD_CE = 1; // 关闭LCD LCD_DC = 1; &#125;/*-----------------------------------------------------------------------LCD_clear : LCD清屏函数编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void LCD_clear(void)&#123; unsigned int i; LCD_write_byte(0x0c, 0); LCD_write_byte(0x80, 0); for (i=0; i&lt;504; i++) LCD_write_byte(0, 1);&#125;/*-----------------------------------------------------------------------LCD_set_XY : 设置LCD坐标函数输入参数：X ：0－83Y ：0－5编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void LCD_set_XY(unsigned char X, unsigned char Y)&#123; LCD_write_byte(0x40 | Y, 0); // column LCD_write_byte(0x80 | X, 0); // row&#125;/*-----------------------------------------------------------------------LCD_write_char : 显示英文字符输入参数：c ：显示的字符；编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void LCD_write_char(unsigned char c)&#123; unsigned char line; c -= 32; for (line=0; line&lt;6; line++) LCD_write_byte(font6x8[c][line], 1);&#125;/*-----------------------------------------------------------------------LCD_write_english_String : 英文字符串显示函数输入参数：*s ：英文字符串指针；X、Y : 显示字符串的位置,x 0-83 ,y 0-5编写日期 ：2004-8-10最后修改日期 ：2004-8-10 -----------------------------------------------------------------------*/void LCD_write_english_string(unsigned char X,unsigned char Y,char *s ,unsigned char len)//English String&#123; unsigned char i=0; LCD_set_XY(0,Y);//把第Y行清零 for(i=0;i&lt;84;i++) &#123; LCD_write_byte(0,1); &#125; LCD_set_XY(X,Y); i=0; while (*s) &#123; LCD_write_char(*s); s++; i++; if(i&gt;=len)return; &#125;&#125;void LCD_write_english_string_n(unsigned char X,unsigned char Y,char *s)//English String&#123; unsigned char i=0; LCD_set_XY(0,Y);//把第Y行清零 for(i=0;i&lt;84;i++) &#123; LCD_write_byte(0,1); &#125; LCD_set_XY(X,Y); i=0; while (*s) &#123; LCD_write_char(*s); s++; i++; if(i&gt;=14)return; &#125;&#125;/*-----------------------------------------------------------------------LCD_draw_map : 位图绘制函数输入参数：X、Y ：位图绘制的起始X、Y坐标；*map ：位图点阵数据；Pix_x ：位图像素（长）Pix_y ：位图像素（宽）编写日期 ：2004-8-13最后修改日期 ：2004-8-13-----------------------------------------------------------------------*/void LCD_draw_bmp_pixel(unsigned char X,unsigned char Y,unsigned char *map, unsigned char Pix_x,unsigned char Pix_y)&#123; unsigned int i,n; unsigned char row; if (Pix_y%8==0) row=Pix_y/8; //计算位图所占行数 else row=Pix_y/8+1; for (n=0;n&lt;row;n++) &#123; LCD_set_XY(X,Y); for(i=0; i&lt;Pix_x; i++) &#123; LCD_write_byte(map[i+n*Pix_x], 1); &#125; Y++; //换行 &#125;&#125;/*-----------------------------------------------------------------------LCD_write_chinese_string: 在LCD上显示汉字------------------------------------------------------------------------*/void ShowHz16(unsigned char Y,unsigned char X,unsigned char *address)&#123; unsigned char i; LCD_set_XY(X,Y); for(i=0;i&lt;16;i++) &#123;LCD_write_byte(*address,1);address++;&#125; LCD_set_XY(X,++Y); for(i=0;i&lt;16;i++) &#123;LCD_write_byte(*address,1);address++;&#125;&#125;/*-----------------------------------------------------------------------LCD_init : 3310LCD初始化编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void initLcd(void)&#123; // CC2430 中，I/O 口做普通 I/O 使用时和每个 I/O 端口相关的寄存器有 3 个，分别是 //PxSEL //功能选择寄存器，PxDIR 方向寄存器，PxINP 输入模式寄存器，其中 x 为 0，1，2 。 P1DIR |= 0x1f; //把P11，P12，P13. P14 设置为输出 P1SEL &amp;= ~0x1f; P1INP &amp;= ~0x1f; //P1_0=0; LCD_CE = 1; // 关闭LCD Delay_nms(1); LCD_CE = 0; // 使能LCD Delay_nms(1); LCD_write_byte(0x21, 0); // 使用扩展命令设置LCD模式 LCD_write_byte(0xc8, 0); // 设置偏置电压 LCD_write_byte(0x06, 0); // 温度校正 LCD_write_byte(0x13, 0); // 1:48 LCD_write_byte(0x20, 0); // 使用基本命令 LCD_clear(); // 清屏 LCD_write_byte(0x0c, 0); // 设定显示模式，正常显示 LCD_CE=1 ; // 关闭LCD&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void lcdUpdate(char *pLine1, char *pLine2) &#123; lcdUpdateLine(LINE1, pLine1); lcdUpdateLine(LINE2, pLine2); return;&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void waitVisible(uint8 visibility)&#123; uint16 i; if(visibility)&#123; i = 100; &#125; else&#123; i = 6; &#125; while(i--)&#123; Delay_nms(10); &#125;&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************//*void lcdUpdateLine(uint8 line, char *pLine) &#123; LCD_write_english_string(0,line,pLine);&#125;*//******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void lcdUpdateChar(uint8 line, uint8 position, char c)&#123; LCD_set_XY(position*6,line); LCD_write_char(c);&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void lcdUpdateSymbol(uint8 line, uint8 position, char c)&#123; LCD_set_XY(position*6,line); LCD_write_char(c);&#125;/******************************************************************************* See lcd.h for a description of this function.滚动显示******************************************************************************//*void scrollText(char *string, UINT8 length)&#123; UINT8 i = 0; while(getJoystickDirection() != CENTRED); do&#123; lcdUpdateLine(LINE2, &amp;string[i]); i++; if(getJoystickDirection() != CENTRED) &#123; lcdUpdateLine(LINE2, &amp;(string[length-15]));//cywu 17-&gt;15 return; &#125; Delay_nms(100); &#125; while((string[i+13] != '\0') &amp;&amp; (i + 13) &lt; length);//cywu 15-&gt;13&#125;*/ hal_types.h 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424/******************************************************************************Filename: lcd.cTarget: cc2430Author: KJARevised: 16/12-2005Revision: 1.0Description:Function implementations for common LCD functions for use with the SmartRF04EB.******************************************************************************/#include "ioCC2530.h"#include "LCD3310.h"// protos/**************************************/// english_6x8_pixel// 6 x 8 font// 1 pixel space at left and bottom// index = ASCII - 32__code const unsigned char font6x8[][6] =&#123; &#123; 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 &#125;, // sp 0 &#123; 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 &#125;, // ! 1 &#123; 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 &#125;, // " 2 &#123; 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 &#125;, // # 3 &#123; 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 &#125;, // $ 4 &#123; 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 &#125;, // % 5 &#123; 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 &#125;, // &amp; 6 &#123; 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 &#125;, // ' 7 &#123; 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 &#125;, // ( 8 &#123; 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 &#125;, // ) 9 &#123; 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 &#125;, // * 10 &#123; 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 &#125;, // + 11 &#123; 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 &#125;, // , 12 &#123; 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 &#125;, // - 13 &#123; 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 &#125;, // . 14 &#123; 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 &#125;, // / 15 &#123; 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E &#125;, // 0 16 &#123; 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 &#125;, // 1 17 &#123; 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 &#125;, // 2 18 &#123; 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 &#125;, // 3 19 &#123; 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 &#125;, // 4 20 &#123; 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 &#125;, // 5 21 &#123; 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 &#125;, // 6 22 &#123; 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 &#125;, // 7 23 &#123; 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 &#125;, // 8 24 &#123; 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E &#125;, // 9 25 &#123; 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 &#125;, // : 26 &#123; 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 &#125;, // ; 27 &#123; 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 &#125;, // &lt; 28 &#123; 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 &#125;, // = 29 &#123; 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 &#125;, // &gt; 30 &#123; 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 &#125;, // ? 31 &#123; 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E &#125;, // @ 32 &#123; 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C &#125;, // A 33 &#123; 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 &#125;, // B 34 &#123; 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 &#125;, // C 35 &#123; 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C &#125;, // D 36 &#123; 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 &#125;, // E 37 &#123; 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 &#125;, // F 38 &#123; 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A &#125;, // G 39 &#123; 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F &#125;, // H 40 &#123; 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 &#125;, // I 41 &#123; 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 &#125;, // J 42 &#123; 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 &#125;, // K 43 &#123; 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 &#125;, // L 44 &#123; 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F &#125;, // M 45 &#123; 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F &#125;, // N 46 &#123; 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E &#125;, // O 47 &#123; 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 &#125;, // P 48 &#123; 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E &#125;, // Q 49 &#123; 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 &#125;, // R 50 &#123; 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 &#125;, // S 51 &#123; 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 &#125;, // T 52 &#123; 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F &#125;, // U 53 &#123; 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F &#125;, // V 54 &#123; 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F &#125;, // W 55 &#123; 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 &#125;, // X 56 &#123; 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 &#125;, // Y 57 &#123; 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 &#125;, // Z 58 &#123; 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 &#125;, // [ 59 &#123; 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 &#125;, // 55 60 &#123; 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 &#125;, // ] 61 &#123; 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 &#125;, // ^ 62 &#123; 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 &#125;, // _ 63 &#123; 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 &#125;, // ' 64 &#123; 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 &#125;, // a 65 &#123; 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 &#125;, // b 66 &#123; 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 &#125;, // c 67 &#123; 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F &#125;, // d 68 &#123; 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 &#125;, // e 69 &#123; 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 &#125;, // f 70 &#123; 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C &#125;, // g 71 &#123; 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 &#125;, // h 72 &#123; 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 &#125;, // i 73 &#123; 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 &#125;, // j 74 &#123; 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 &#125;, // k 75 &#123; 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 &#125;, // l 76 &#123; 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 &#125;, // m 77 &#123; 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 &#125;, // n 78 &#123; 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 &#125;, // o 79 &#123; 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 &#125;, // p 80 &#123; 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC &#125;, // q 81 &#123; 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 &#125;, // r 82 &#123; 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 &#125;, // s 83 &#123; 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 &#125;, // t 84 &#123; 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C &#125;, // u 85 &#123; 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C &#125;, // v 86 &#123; 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C &#125;, // w 87 &#123; 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 &#125;, // x 88 &#123; 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C &#125;, // y 89 &#123; 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 &#125;, // z 90 &#123; 0x00, 0x00, 0xff, 0xff, 0x00, 0x00 &#125;, // || 91 &#123; 0x08, 0x1c, 0x2a, 0x08, 0x08, 0x08 &#125;, // &lt;- 92 &#123; 0x08, 0x08, 0x08, 0x2a, 0x1c, 0x08 &#125;, // -&gt; 94 &#123; 0x04, 0x02, 0xff, 0x02, 0x04, 0x00 &#125;, // up 94 &#123; 0x00, 0x20, 0x40, 0xff, 0x40, 0x20 &#125;, // down 95 &#123; 0x00, 0x01, 0x01, 0xFF, 0x81, 0x81 &#125;, //ADC Series上用的上划线 &#123; 0x00, 0x80, 0x80, 0xFF, 0x80, 0x80 &#125; //ADC Series上用的下划线&#125;;/************ 延时函数 ******************************/void Delay_nms(unsigned int Time) // 延时单位:ms&#123; unsigned int i; unsigned char j; for(i=0;i&lt;Time;i++) &#123; for(j=0;j&lt;123;j++)&#123;&#125; &#125;&#125;/******** 发送一个字节的数据到液晶控制器*************************/void SendByte(unsigned char Data)&#123; unsigned char i; LCD_CE=0; for(i=0;i&lt;8;i++) &#123; if(Data &amp; 0x80) LCD_SDA = 1; else LCD_SDA = 0; Data&lt;&lt;=1; LCD_SCL = 0; LCD_SCL = 1; &#125; LCD_CE=1;&#125;/*-----------------------------------------------------------------------LCD_write_byte : 使用SPI接口写数据到LCD输入参数：data ：写入的数据；command ：写数据/命令选择；编写日期 ：2004-8-10最后修改日期 ：2004-8-13-----------------------------------------------------------------------*/void LCD_write_byte(unsigned char data, unsigned char command)&#123; LCD_CE = 0 ; // 使能LCD if (command == 0) LCD_DC = 0; // 传送命令 else LCD_DC = 1; // 传送数据 SendByte(data); LCD_CE = 1; // 关闭LCD LCD_DC = 1; &#125;/*-----------------------------------------------------------------------LCD_clear : LCD清屏函数编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void LCD_clear(void)&#123; unsigned int i; LCD_write_byte(0x0c, 0); LCD_write_byte(0x80, 0); for (i=0; i&lt;504; i++) LCD_write_byte(0, 1);&#125;/*-----------------------------------------------------------------------LCD_set_XY : 设置LCD坐标函数输入参数：X ：0－83Y ：0－5编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void LCD_set_XY(unsigned char X, unsigned char Y)&#123; LCD_write_byte(0x40 | Y, 0); // column LCD_write_byte(0x80 | X, 0); // row&#125;/*-----------------------------------------------------------------------LCD_write_char : 显示英文字符输入参数：c ：显示的字符；编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void LCD_write_char(unsigned char c)&#123; unsigned char line; c -= 32; for (line=0; line&lt;6; line++) LCD_write_byte(font6x8[c][line], 1);&#125;/*-----------------------------------------------------------------------LCD_write_english_String : 英文字符串显示函数输入参数：*s ：英文字符串指针；X、Y : 显示字符串的位置,x 0-83 ,y 0-5编写日期 ：2004-8-10最后修改日期 ：2004-8-10 -----------------------------------------------------------------------*/void LCD_write_english_string(unsigned char X,unsigned char Y,char *s ,unsigned char len)//English String&#123; unsigned char i=0; LCD_set_XY(0,Y);//把第Y行清零 for(i=0;i&lt;84;i++) &#123; LCD_write_byte(0,1); &#125; LCD_set_XY(X,Y); i=0; while (*s) &#123; LCD_write_char(*s); s++; i++; if(i&gt;=len)return; &#125;&#125;void LCD_write_english_string_n(unsigned char X,unsigned char Y,char *s)//English String&#123; unsigned char i=0; LCD_set_XY(0,Y);//把第Y行清零 for(i=0;i&lt;84;i++) &#123; LCD_write_byte(0,1); &#125; LCD_set_XY(X,Y); i=0; while (*s) &#123; LCD_write_char(*s); s++; i++; if(i&gt;=14)return; &#125;&#125;/*-----------------------------------------------------------------------LCD_draw_map : 位图绘制函数输入参数：X、Y ：位图绘制的起始X、Y坐标；*map ：位图点阵数据；Pix_x ：位图像素（长）Pix_y ：位图像素（宽）编写日期 ：2004-8-13最后修改日期 ：2004-8-13-----------------------------------------------------------------------*/void LCD_draw_bmp_pixel(unsigned char X,unsigned char Y,unsigned char *map, unsigned char Pix_x,unsigned char Pix_y)&#123; unsigned int i,n; unsigned char row; if (Pix_y%8==0) row=Pix_y/8; //计算位图所占行数 else row=Pix_y/8+1; for (n=0;n&lt;row;n++) &#123; LCD_set_XY(X,Y); for(i=0; i&lt;Pix_x; i++) &#123; LCD_write_byte(map[i+n*Pix_x], 1); &#125; Y++; //换行 &#125;&#125;/*-----------------------------------------------------------------------LCD_write_chinese_string: 在LCD上显示汉字------------------------------------------------------------------------*/void ShowHz16(unsigned char Y,unsigned char X,unsigned char *address)&#123; unsigned char i; LCD_set_XY(X,Y); for(i=0;i&lt;16;i++) &#123;LCD_write_byte(*address,1);address++;&#125; LCD_set_XY(X,++Y); for(i=0;i&lt;16;i++) &#123;LCD_write_byte(*address,1);address++;&#125;&#125;/*-----------------------------------------------------------------------LCD_init : 3310LCD初始化编写日期 ：2004-8-10最后修改日期 ：2004-8-10-----------------------------------------------------------------------*/void initLcd(void)&#123; // CC2430 中，I/O 口做普通 I/O 使用时和每个 I/O 端口相关的寄存器有 3 个，分别是 //PxSEL //功能选择寄存器，PxDIR 方向寄存器，PxINP 输入模式寄存器，其中 x 为 0，1，2 。 P1DIR |= 0x1f; //把P11，P12，P13. P14 设置为输出 P1SEL &amp;= ~0x1f; P1INP &amp;= ~0x1f; //P1_0=0; LCD_CE = 1; // 关闭LCD Delay_nms(1); LCD_CE = 0; // 使能LCD Delay_nms(1); LCD_write_byte(0x21, 0); // 使用扩展命令设置LCD模式 LCD_write_byte(0xc8, 0); // 设置偏置电压 LCD_write_byte(0x06, 0); // 温度校正 LCD_write_byte(0x13, 0); // 1:48 LCD_write_byte(0x20, 0); // 使用基本命令 LCD_clear(); // 清屏 LCD_write_byte(0x0c, 0); // 设定显示模式，正常显示 LCD_CE=1 ; // 关闭LCD&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void lcdUpdate(char *pLine1, char *pLine2) &#123; lcdUpdateLine(LINE1, pLine1); lcdUpdateLine(LINE2, pLine2); return;&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void waitVisible(uint8 visibility)&#123; uint16 i; if(visibility)&#123; i = 100; &#125; else&#123; i = 6; &#125; while(i--)&#123; Delay_nms(10); &#125;&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************//*void lcdUpdateLine(uint8 line, char *pLine) &#123; LCD_write_english_string(0,line,pLine);&#125;*//******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void lcdUpdateChar(uint8 line, uint8 position, char c)&#123; LCD_set_XY(position*6,line); LCD_write_char(c);&#125;/******************************************************************************* See lcd.h for a description of this function.******************************************************************************/void lcdUpdateSymbol(uint8 line, uint8 position, char c)&#123; LCD_set_XY(position*6,line); LCD_write_char(c);&#125;/******************************************************************************* See lcd.h for a description of this function.滚动显示******************************************************************************//*void scrollText(char *string, UINT8 length)&#123; UINT8 i = 0; while(getJoystickDirection() != CENTRED); do&#123; lcdUpdateLine(LINE2, &amp;string[i]); i++; if(getJoystickDirection() != CENTRED) &#123; lcdUpdateLine(LINE2, &amp;(string[length-15]));//cywu 17-&gt;15 return; &#125; Delay_nms(100); &#125; while((string[i+13] != '\0') &amp;&amp; (i + 13) &lt; length);//cywu 15-&gt;13&#125;*/ delay_us.c 1234567891011#include "head1.h"void delay_us(uint time)//一微秒&#123; while(time--)&#123; asm("nop"); asm("nop"); asm("nop");&#125;&#125; uchardata.c 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include "head1.h" uchar uchardata(uchar *data)&#123; //uchar data[5] = &#123;0&#125;;//5字节40位 uchar i,temp = 0,flag = 2,checkout = 0; P0DIR |= 0x01;//设置为输出模式 P0_0 = 0;//先拉低 delay_us(20000);//主机拉低20ms P0_0 = 1;//主机拉高 P0DIR &amp;= ~0x01;//设置为输入模式 delay_us(40); if(!P0_0) &#123; flag = 2; while((!P0_0)&amp;&amp;flag++);//使用flag终止异常循环//20 if(flag == 1) return 0; flag = 2; while(P0_0 &amp;&amp; flag++); for(i = 0;i &lt; 40;i++) &#123; flag = 2; while(!P0_0 &amp;&amp; flag++); delay_us(30);//低电平为26~28us，超过则为高电平 temp = 0; if(P0_0) &#123;temp = 1;&#125; flag = 2; while(P0_0 &amp;&amp; flag++);//等待高电平结束 if(flag == 1) break; data[i/8] &lt;&lt;= 1;//左移一位 data[i/8] |= temp;//赋temp值，循环保留 &#125;&#125; P0DIR |= 0x01;//输出 P0_0 = 1;//拉高 for(i = 0;i &lt; 4;i++) &#123; checkout += data[i];&#125; if (checkout == data[4]) &#123;return 1;&#125; else return 0;&#125; main.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include "head1.h"#include "LCD3310.h"char str1[] = "humidity:";char str2[] = "temperature:";//uchar buff[4];uchar temper[2];uchar humid[2];uchar shi[][32]=&#123;&#123;0x10,0x60,0x02,0x8C,0x00,0x00,0xFE,0x92,0x92,0x92,0x92,0x92,0xFE,0x00,0x00,0x00,0x04,0x04,0x7E,0x01,0x40,0x7E,0x42,0x42,0x7E,0x42,0x7E,0x42,0x42,0x7E,0x40,0x00&#125;,&#123;0x00,0x00,0xFC,0x24,0x24,0x24,0xFC,0x25,0x26,0x24,0xFC,0x24,0x24,0x24,0x04,0x00,0x40,0x30,0x8F,0x80,0x84,0x4C,0x55,0x25,0x25,0x25,0x55,0x4C,0x80,0x80,0x80,0x00&#125;,&#123;0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00&#125;,&#125;;uchar wen[][32]=&#123; &#123;0x10,0x60,0x02,0x8C,0x00,0xFE,0x92,0x92,0x92,0x92,0x92,0x92,0xFE,0x00,0x00,0x00,0x04,0x04,0x7E,0x01,0x44,0x48,0x50,0x7F,0x40,0x40,0x7F,0x50,0x48,0x44,0x40,0x00&#125;, &#123;0x00,0x00,0xFC,0x24,0x24,0x24,0xFC,0x25,0x26,0x24,0xFC,0x24,0x24,0x24,0x04,0x00,0x40,0x30,0x8F,0x80,0x84,0x4C,0x55,0x25,0x25,0x25,0x55,0x4C,0x80,0x80,0x80,0x00&#125;,&#123;0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00&#125;,&#125;;/*uchar meiyy1[][32]=&#123;&#123;0x10,0x10,0x10,0xFF,0x10,0x10,0xF0,0x00,0x00,0xF8,0x08,0x08,0x08,0xF8,0x00,0x00,0x80,0x40,0x30,0x0F,0x40,0x80,0x7F,0x00,0x00,0x7F,0x20,0x20,0x20,0x7F,0x00,0x00&#125;,&#123;0x20,0x24,0x24,0x24,0xFE,0x23,0x22,0x20,0x20,0xFF,0x20,0x22,0x2C,0xA0,0x20,0x00,0x00,0x08,0x48,0x84,0x7F,0x02,0x41,0x40,0x20,0x13,0x0C,0x14,0x22,0x41,0xF8,0x00&#125;,&#123;0x44,0x24,0x14,0x84,0xE4,0x8F,0xF4,0x84,0xE4,0x8F,0x74,0x44,0x44,0xC4,0x44,0x00,0x04,0x02,0xFF,0x80,0x7A,0x0A,0x0A,0x7A,0xA1,0x40,0x2F,0x10,0x2C,0x43,0x80,0x00&#125;,&#123;0x00,0x00,0x80,0x00,0x00,0xE0,0x02,0x04,0x18,0x00,0x00,0x00,0x40,0x80,0x00,0x00,0x10,0x0C,0x03,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x40,0x78,0x00,0x01,0x0E,0x00&#125;,&#123;0x20,0x22,0x2A,0x2A,0xAA,0x6A,0x3A,0x2E,0x29,0x29,0x29,0x29,0x29,0x20,0x20,0x00,0x08,0x04,0x02,0x01,0xFF,0x55,0x55,0x55,0x55,0x55,0x55,0xFF,0x00,0x00,0x00,0x00&#125;,&#125;;uchar meiyy2[][32]=&#123;&#123;0x00,0x04,0x24,0x24,0x25,0x26,0x24,0xFC,0x24,0x26,0x25,0x24,0x24,0x04,0x00,0x00,0x81,0x89,0x89,0x49,0x49,0x29,0x19,0x0F,0x19,0x29,0x49,0x49,0x89,0x89,0x81,0x00&#125;,&#123;0x00,0x08,0x88,0x88,0x89,0x8E,0x88,0xF8,0x88,0x8C,0x8B,0x88,0x88,0x08,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xFF,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00&#125;,&#123;0x00,0x08,0x88,0x88,0x89,0x8E,0x88,0xF8,0x88,0x8C,0x8B,0x88,0x88,0x08,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0xFF,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00&#125;,&#123;0x10,0x60,0x02,0x8C,0x20,0x90,0x8E,0x88,0x88,0xFF,0x88,0x88,0x88,0x88,0x80,0x00,0x04,0x04,0x7E,0x01,0x80,0x40,0x30,0x0F,0x00,0x00,0x3F,0x40,0x40,0x40,0x70,0x00&#125;,&#123;0x20,0xC2,0x0C,0x80,0x00,0xE0,0x2F,0x29,0xE9,0x09,0xE9,0x29,0x2F,0xE0,0x00,0x00,0x04,0x04,0x7E,0x41,0x44,0x25,0x15,0x0D,0x05,0xFE,0x0D,0x15,0x25,0x45,0x44,0x00&#125;,&#125;;*/void main()&#123; while(1)&#123; uint i,a,b,j;//,X = 0,Y = 0; CLKCONCMD &amp;= ~0x40; //等待晶振稳定 while(!(SLEEPSTA &amp; 0x40)); //TICHSPD128分频，CLKSPD不分频 CLKCONCMD &amp;= ~0x47; //关闭不用的RC振荡器 SLEEPCMD |= 0x04; P0SEL&amp;=~0X01; initLcd(); uchar data[5]; //uchar data_n[5] = &#123;0,1,2,3,4&#125;; uchardata(data); for(i = 0;i&lt;5;i++) &#123; humid[0]=data[0]/10+48; humid[1]=data[0]%10+48; temper[0]=data[2]/10+48; temper[1]=data[2]%10+48; //LCD_write_english_string(0,0,buff); //LCD_write_english_string(0,0,str1,14); //LCD_write_english_string(0,2,str2,14); for(j = 0;j&lt;3;j++) &#123; ShowHz16(0,j*16,wen[j]);&#125; for(j = 0;j&lt;3;j++) &#123; ShowHz16(3,j*16,shi[j]);&#125; LCD_write_english_string(30,2,humid,2);//English String LCD_write_english_string(30,5,temper,2); /*for(j = 0;j&lt;5;j++) &#123; ShowHz16(0,j*16,meiyy1[j]);&#125; for(j = 0;j&lt;5;j++) &#123; ShowHz16(2,j*16,meiyy2[j]);&#125;*/ &#125; delay_us(60000);//每秒刷新一次 delay_us(60000);//每秒刷新一次 delay_us(60000);//每秒刷新一次 delay_us(60000);//每秒刷新一次 delay_us(60000);//每秒刷新一次 //LCD_clear();//清屏函数 &#125;&#125; 测试结果]]></content>
      <tags>
        <tag>C语言</tag>
        <tag>CC2530</tag>
        <tag>Nokia5510</tag>
        <tag>DHT11</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于CC2530驱动步进电机]]></title>
    <url>%2F2019%2F07%2F15%2F%E5%9F%BA%E4%BA%8ECC2530%E9%A9%B1%E5%8A%A8%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[四相步进电机单双八拍驱动方式 端口 时刻1 时刻2 时刻3 时刻4 时刻5 时刻6 时刻7 时刻8 E H H H H H H H H A L L L B L L L C L L L D L L L 各部分程序ioint.h 12345678910111213141516#include &lt;ioCC2530.h&gt;#define uint unsigned int#define uchar unsigned char#define A P1_5#define B P1_6#define C P1_7#define D P0_5#define SW6 P0_4 void delayms(uint n);void io_init();void Initial();uint keyscan(uint mode);uint motor(uint state,uint motor_state);uint m_state(uint mode,uint state); KeyScan.c 1234567891011121314151617181920#include "ioint.h"uint keyscan(uint mode)&#123; //检测SW6是否为低电平，低电平有效 if (SW6 == 0) &#123; delayms(15); //检测到按键 if (SW6 == 0) &#123; mode++; if (mode &gt;= 3) mode = 0; //直到松开按键 while (!SW6); &#125; &#125; return mode;&#125; delayms.c 123456789#include &lt;ioCC2530.h&gt;#define uint unsigned intvoid delayms(uint n)&#123; for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; 536; j++);&#125; io_init.c 1234567891011121314151617181920212223242526#include &lt;ioCC2530.h&gt;/*按键初始化函数*/void io_init()&#123; //P0.4,P0.5设为通用I/O输出 P0SEL &amp;= ~0x10; //按键在P04，P05设为输入 P0DIR &amp;= ~0x10; //P0.4，P0.5为三态 P0INP |= 0x30; &#125;/*LED初始化*/void Initial()&#123; P1SEL&amp;=~0XE0;//P15、P16、P17定义为输出P1DIR |= 0xe0; P0SEL&amp;=~0X20;//P05定义为输出P0DIR |= 0x20;P1_5=1;P1_6=1;P1_7=1;P0_5=1;&#125; m_state.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include "ioint.h"uint m_state(uint mode,uint state)&#123; if(mode!=0) &#123; switch (state) &#123; case 0: &#123; A = 0;B = 1;C = 1;D = 1;break; &#125; case 1: &#123; A = 0;B = 0;C = 1;D = 1;break; &#125; case 2: &#123; A = 1;B = 0;C = 1;D = 1;break; &#125; case 3: &#123; A = 1;B = 0;C = 0;D = 1;break; &#125; case 4: &#123; A = 1;B = 1;C = 0;D = 1;break; &#125; case 5: &#123; A = 1;B = 1;C = 0;D = 0;break; &#125; case 6: &#123; A = 1;B = 1;C = 1;D = 0;break; &#125; case 7: &#123; A = 0;B = 1;C = 1;D = 0;break; &#125; default: A = 1;B = 1;C = 1;D = 1; mode = 0;break; &#125; &#125; else &#123; A=1;B=1;C=1;D=1; &#125; return mode;&#125; motor.c 123456789101112131415161718192021#include "ioint.h"uint motor(uint mode,uint state)&#123; switch (mode) &#123; case 1: state++; if (state &gt;= 8) state = 0; break; case 2: if (state == 0) state = 8; state--; break; default: break; &#125; return state;&#125; main1.c 12345678910111213141516171819#include "ioint.h"#include &lt;ioCC2530.h&gt;uint mode=1;uint state=3;void main()&#123; io_init(); Initial(); while (1) &#123; mode=keyscan(mode); mode=m_state(mode,state); state=motor(mode,state); delayms(2); &#125;&#125;]]></content>
      <tags>
        <tag>C语言</tag>
        <tag>CC2530</tag>
        <tag>步进电机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[易腾创想day1]]></title>
    <url>%2F2019%2F07%2F13%2F%E6%98%93%E8%85%BE%E5%88%9B%E6%83%B3day1%2F</url>
    <content type="text"><![CDATA[雷永辉—&gt;算法？IPv4属性闪退，在安全模式下重注册dll 输入cmd 输入for %1 in (%windir%\system32*.dll) do regsvr32.exe /s %1 利用实验平台模拟智能家居使用C语言实现，Andriod，服务器物联网与无线通信技术。 NB-IoT，窄带物联网，利用手机通信频段分出来进行物联。 覆盖广 功耗低 成本低(&lt;=20RMB) 连接多 5G技术特点 高速度 泛在通信 低延迟 低功耗无人驾驶 技术层面已经成熟？智能电网 减少损耗智能工厂 AI代替 LoRa —— 超远距离无线传输方案 自纠错 覆盖广 功耗低 标题文字 WIFI Zigbee 电力载波 Blueteeth 传输距离 100-300M 50-300M 500M 1-10M 传输速率 300Mbps 250kbps 500Mbps 1Mbps 功耗 10-50mA 5mA zigbee与WIFI之间 特点 应用最广 可自组网，最大节点数可达65000个 可基于电力线传输，无需布线 CC2530基础开发 掌握I/O的使用 理解存储器以及映射的关系 掌握ADC的使用方法 掌握串口和DMA的使用方法 掌握定时器的使用iot.h 12345#include &lt;iocc2530.h&gt;#define uchar unsigned char#define uint unsigned int#define LED1 P0_1 //IO口定义#define SW P0_4 main.c12345678910111213141516#include "iot.h"void main()&#123; while(1) &#123; //blabla... &#125;&#125;``` &lt;font color=red&gt;**key.c**&lt;/font&gt;```C#include "iot.h"void key_scan()&#123; ;&#125;]]></content>
      <tags>
        <tag>易腾创想</tag>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo下NexT主题配置]]></title>
    <url>%2F2019%2F05%2F17%2Fhexo%E4%B8%8BNexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[对于有博客搭建需求的人来说，hexo的确是个不错的选择，一是永久免费，不需要购买云服务器，域名也不需要备案，十分方便，二是不会出玄学问题，我第一个博客是在阿里云上用wordpress搭建的，但是没几个月后台就无法登入，原因到现在也不清楚，所以索性选择了Hexo，即使出现问题也可以直接用拷贝的blog文件夹覆盖，唯一缺点就是没有一个wordpress那样的后台可以方便地写博客和调整博客的设置。NexT主题使用的人很多，功能比较全，很多坑也被踩过，但是设置比较麻烦，所以在基本把这个博客布置完成后写这个博文来记录下过程备忘，其中不少都是B站上教程中的以及其他人的博客中所述，链接一并放在后面。 博客设置更新文章 博客目录下执行hexo new &quot;文章名字&quot;,source/_posts里生成文章名.md文件 用markdown编写 起始字段 title 文章标题 date 创建日期 updated 修改日期 comments 是否开启评论 tags 标签 categories 分类 permalink url中名字 mathjax 是否使用数学公式渲染 hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 绑定域名 域名是在阿里云用学生优惠买的，这个平台的域名价格便宜，但是要备案，狗爹之类的应该不需要。 在控制台那个添加解析CNAME记录，就填xxxx.github.io就行，然后在github的source目录里新建一个CNAME文件，写上你的域名，保存，此时就可以用域名访问了。 在本地的source目录下再写一个CNAME文件以防deploy后失效。 启用主题打开themes/next/下的_config.yml,查找scheme，可以看到如下四种不同的风格方案：1234scheme: Muse #scheme: Mist #scheme: Pisces #scheme: Gemini 去掉#注释，即启用对应的scheme。 博文置顶修改 hexo-generator-index插件，把文件：node_modules/hexo-generator-index/lib/generator.js中的代码替换为：12345678910111213141516171819202122232425262728&apos;use strict&apos;;var pagination = require(&apos;hexo-pagination&apos;);module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &apos;page&apos;; return pagination(&apos;&apos;, posts, &#123; perPage: config.index_generator.per_page, layout: [&apos;index&apos;, &apos;archive&apos;], format: paginationDir + &apos;/%d/&apos;, data: &#123; __index: true &#125; &#125;);&#125;; 在文章中添加 top 值，数值越大文章越靠前，如:12345---......copyright: truetop: 100--- 默认不设置则为0，数值相同时按时间排序。 设置语言 博客框架默认的语言是英文，前往/themes/next/languages，查看当前NexT版本简体中文对照文件的名称是zh-Hans还是zh-CN。 再前往根目录下的_config.yml，查找language，设置成language: zh-Hans或language: zh-CN，即显示简体中文。 设置菜单对应页面 打开themes/next/下的_config.yml，查找menu 123456789menu: home: / || home #about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat` 去掉#注释即可显示对应的菜单项，也可自定义新的菜单项。 ||之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。 新添加的菜单需要翻译对应的中文打开hexo/theme/next/languages/zh-CN.yml，在menu下自定义，如：12345678910menu: resources: 资源``` * hexo new page &quot;categories&quot;此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下:```html--- title: 分类 date: 2017-12-14 13:05:38 type: &quot;categories&quot; comments: false --- 注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。 Blockquoto引用样式居中引用 HTML方式: 直接在 Markdown 文件中编写 HTML 来调用，其中 class=“blockquote-center” 是必须的 1&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt; 标签 方式，要求版本在0.4.5或以上 1&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125; 标签别名 1&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; 最终效果： blah blah blahblah blah blah blah blah blah Bootstrap Callout 引用使用方法如下：1&#123;% note class_name %&#125; Content &#123;% endnote %&#125; class_name 可以是 default，primary，info 等。具体效果如下：default primary success info warning danger 主题设置修改站点图标 去图标网站或者自己制作32x32的图标 复制到/themes/next/source/images/下面 打开主题的_config.yml,输入：1234567favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml small和medium即为保存的图标路径 设置头像 打开themes/next/下的_config.yml，查找avatar 1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: http://XXXXXXXXX avatar的值是图片的链接地址(完整的URI 或者 站内的相对地址皆可) 代码高亮、可复制代码高亮打开主题的_config.yml，找到highlight_theme属性：12345# Code Highlight theme# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: night 在hexo主目录的_config.yml中找到或者输入：12345highlight: enable: true line_number: true auto_detect: true tab_replace: false 代码可复制背景图片/顶栏、底栏、侧栏图片及文字颜色打开theme/next/source/css/_custom/custom.styl，添加：123456789101112131415161718192021222324//背景图片body&#123; background:url(图片链接); background-size:cover; background-repeat:no-repeat; background-attachment:fixed; background-position:center;&#125;//顶栏图片.header &#123; background:url(图片链接) none repeat scroll !important;&#125;//底栏背景色.footer &#123; background:rgba(颜色rgb,透明度) none repeat scroll !important;&#125;//侧栏图片及内部文字颜色修改#sidebar &#123; background:url(图片链接); background-size: cover; background-position:center; background-repeat:no-repeat; p,span,a &#123;color: 颜色代码;&#125;&#125; 设置侧栏左右侧、控制按钮样式打开主题设置的_config.yml，找到sidebar 设置侧栏左右 Pisces方案和Gemini方案 123sidebar:position: left#position: right Mist方案和Muse方案 打开next/source/js/src/motion.js，查找paddingRight，把所有（2个）PaddingRight更改为paddingLeft.。 打开next/source/css/_custom/custom.styl，添加以下内容： 123456//侧边栏置于左侧.sidebar &#123; left: 0; &#125;//侧栏开关置于左侧 .sidebar-toggle &#123; left: $b2t-position-right; &#125; 打开next/source/css/_common/components/back-to-top.styl，将right: $b2t-position-right;改为left: $b2t-position-right; 显示侧栏时机12345678#post - 默认行为，在文章页面（拥有目录列表）时显示#always - 在所有页面中都显示#hide - 在所有页面中都隐藏（可以手动展开）#remove - 完全移除display: post#display: always#display: hide#display: remove 侧栏控制按钮修改打开themes/next/layout/source/js/src/motion.js，找到如下代码处，更换close的内容:123456789101112131415161718192021222324var sidebarToggleLine1st = new SidebarToggleLine(&#123; el: '.sidebar-toggle-line-first', status: &#123; arrow: &#123;width: '50%', rotateZ: '45deg', top: '2px', left: '6px'&#125;, // close: &#123;width: '100%', rotateZ: '-45deg', top: '5px', left: '0px'&#125; //X形 close: &#123;width: '50%', rotateZ: '-45deg', top: '2px', left: '0px'&#125; //箭头形 &#125; &#125;); var sidebarToggleLine2nd = new SidebarToggleLine(&#123; el: '.sidebar-toggle-line-middle', status: &#123; arrow: &#123;width: '90%'&#125;, // close: &#123;opacity: 0&#125; //X形 close: &#123;width: '90%'&#125; //箭头形 &#125; &#125;); var sidebarToggleLine3rd = new SidebarToggleLine(&#123; el: '.sidebar-toggle-line-last', status: &#123; arrow: &#123;width: '50%', rotateZ: '-45deg', top: '-2px', left: '6px'&#125;, // close: &#123;width: '100%', rotateZ: '45deg', top: '-5px', left: '0px'&#125; //X形 close: &#123;width: '50%', rotateZ: '45deg', top: '-2px', left: '0px'&#125; //箭头形 &#125; &#125;); 设置底栏标签修改/themes/next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;，我使用的是fa-star，五角星。 文章添加阴影、透明效果找到theme/next/source/css/_custom/custom.styl，添加：123456789// 主页文章添加阴影效果.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; background:rgba(255,255,255,0.9) none repeat scroll !important; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; 点击头像回到首页修改/themes/next/layout/_macro/sidebar.swig，找到：123&lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt; 在前后加上&lt;a href=&quot;https://jinhuaixn.cn&quot;&gt;&lt;/a&gt;，如下：12345&lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt;&lt;/a&gt; 仿知乎粒子效果在next/_config.yml中有设置网页背景动画效果的选项，比如设置：12# Canvas-nestcanvas_nest: true 就可以使用上我现在这种粒子效果，还有其他三种，如果想使用知乎那种登录效果，可通过如下方式： 在主题目录layout下面的_layout.swig增加canvas 1&lt;div class="bg_content"&gt; &lt;canvas id="canvas"&gt;&lt;/canvas&gt; &lt;/div&gt; 使用原生js写一个仿知乎页面 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;script&gt;class Circle &#123; //创建对象 //以一个圆为对象 //设置随机的 x，y坐标，r半径，_mx，_my移动的距离 //this.r是创建圆的半径，参数越大半径越大 //this._mx,this._my是移动的距离，参数越大移动 constructor(x, y) &#123; this.x = x; this.y = y; this.r = Math.random() * 10 ; this._mx = Math.random() ; this._my = Math.random() ; &#125; //canvas 画圆和画直线 //画圆就是正常的用canvas画一个圆 //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理 drawCircle(ctx) &#123; ctx.beginPath(); //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。 ctx.arc(this.x, this.y, this.r, 0, 360) ctx.closePath(); ctx.fillStyle = 'rgba(204, 204, 204, 0.3)'; ctx.fill(); &#125; drawLine(ctx, _circle) &#123; let dx = this.x - _circle.x; let dy = this.y - _circle.y; let d = Math.sqrt(dx * dx + dy * dy) if (d &lt; 150) &#123; ctx.beginPath(); //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线： ctx.moveTo(this.x, this.y); //起始点 ctx.lineTo(_circle.x, _circle.y); //终点 ctx.closePath(); ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)'; ctx.stroke(); &#125; &#125; // 圆圈移动 // 圆圈移动的距离必须在屏幕范围内 move(w, h) &#123; this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx); this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my); this.x += this._mx / 2; this.y += this._my / 2; &#125;&#125;//鼠标点画圆闪烁变动class currentCirle extends Circle &#123; constructor(x, y) &#123; super(x, y) &#125; drawCircle(ctx) &#123; ctx.beginPath(); //注释内容为鼠标焦点的地方圆圈半径变化 //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2; this.r = 8; ctx.arc(this.x, this.y, this.r, 0, 360); ctx.closePath(); //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')' ctx.fillStyle = 'rgba(255, 77, 54, 0.3)' ctx.fill(); &#125;&#125;//更新页面用requestAnimationFrame替代setTimeoutwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;let canvas = document.getElementById('canvas');let ctx = canvas.getContext('2d');let w = canvas.width = canvas.offsetWidth;let h = canvas.height = canvas.offsetHeight;let circles = [];let current_circle = new currentCirle(0, 0)let draw = function () &#123; ctx.clearRect(0, 0, w, h); for (let i = 0; i &lt; circles.length; i++) &#123; circles[i].move(w, h); circles[i].drawCircle(ctx); for (j = i + 1; j &lt; circles.length; j++) &#123; circles[i].drawLine(ctx, circles[j]) &#125; &#125; if (current_circle.x) &#123; current_circle.drawCircle(ctx); for (var k = 1; k &lt; circles.length; k++) &#123; current_circle.drawLine(ctx, circles[k]) &#125; &#125; requestAnimationFrame(draw)&#125;let init = function (num) &#123; for (var i = 0; i &lt; num; i++) &#123; circles.push(new Circle(Math.random() * w, Math.random() * h)); &#125; draw();&#125;window.addEventListener('load', init(60));window.onmousemove = function (e) &#123; e = e || window.event; current_circle.x = e.clientX; current_circle.y = e.clientY;&#125;window.onmouseout = function () &#123; current_circle.x = null; current_circle.y = null;&#125;;&lt;/script&gt; 萌萌哒的看板娘(〃’▽’〃)你需要：1234567* Windows 10 1803* node-v8.11.2-x64* git version 2.17.1.windows.2* hexo-v3.7.1* NexT.Muse v6.4.1* hexo-helper-live2d@3.1.0* 看板娘一只 首先，在博客的根目录下执行下方命令，并可以得到类似下方的输出：1234567$ npm install hexo-helper-live2d --savenpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-helper-live2d@3.1.0added 6 packages from 6 contributors and audited 5818 packages in 22.674sfound 0 vulnerabilities 从作者的网站选择一个live2d模型，安装live2d-widget-model-你选中的萌物名字获取对应资源：1234567$ npm install live2d-widget-model-hijiki --savenpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ live2d-widget-model-hijiki@1.0.5added 1 package and audited 5819 packages in 9.782sfound 0 vulnerabilities 在博客根目录下的_config.yml中最后添加： 12345678910111213141516171819202122232425262728293031323334# Live2D## https://github.com/EYHN/hexo-helper-live2dlive2d:enable: truescriptFrom: jsdelivr # 默认pluginRootPath: live2dw/ # 插件在站点上的根目录(相对路径)pluginJsPath: lib/ # 脚本文件相对与插件根目录路径pluginModelPath: assets/ # 模型文件相对与插件根目录路径# scriptFrom: jsdelivr # jsdelivr CDN# scriptFrom: unpkg # unpkg CDN# scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 urltagMode: false # 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中debug: false # 调试, 是否在控制台输出日志model: use: live2d-widget-model-hijiki # npm-module package name # use: hijiki # 博客根目录/live2d_models/ 下的目录名 # use: ./wives/hijiki # 相对于博客根目录的路径 # use: https://cdn.jsdelivr.net/npm/live2d-widget-model-hijiki@1.0.5/assets/hijiki.model.json # 你的自定义 url scale: 1 hHeadPos: 0.5 vHeadPos: 0.618display: superSample: 2 width: 125 height: 125 position: left hOffset: 30 vOffset: -20mobile: show: false scale: 0.05react: opacityDefault: 1 opacityOnHover: 0.2 执行命令 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s，即可在本地4000端口看到啦。 词云词云其实就是标签做的，放在侧边栏上。需要安装插件。1npm install hexo-tag-cloud@^2.0.* --save 接着在next/layout/_macro/sidebar.swig添加如下内容。 123456789101112&#123;% if site.tags.length &gt; 1 %&#125;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcloud.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" charset="utf-8" src="/js/tagcanvas.js"&gt;&lt;/script&gt;&lt;div class="widget-wrap"&gt;&lt;h3 class="widget-title"&gt;Tag Cloud&lt;/h3&gt;&lt;div id="myCanvasContainer" class="widget tagcloud"&gt; &lt;canvas width="250" height="250" id="resCanvas" style="width=100%"&gt; &#123;&#123; list_tags() &#125;&#125; &lt;/canvas&gt;&lt;/div&gt;&lt;/div&gt;&#123;% endif %&#125; 图片放大查看 打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true 进入到theme/text/文件夹下 git clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox 注意！我没用这种方法，也不知道行不行。 访问量统计其实小站没必要搞 打开themes/next/下的_config.yml，查找busuanzi12345678busuanzi_count: enable: true total_visitors: false total_visitors_icon: user total_views: false total_views_icon: eye post_views: true post_views_icon: eye 添加文末版权声明在主题配置文件themes/next/_config.yml中找到creative_commons1234creative_commons: license: by-nc-sa sidebar: false post: true # 将false改为true即可显示版权信息 language: 添加本地搜索 npm install hexo-generator-search 查找主题配置文件themes/next/_config.yml中的local_search：12local_search: enable: true 侧边栏添加音乐播放器网易云音乐目前没有解决的问题是网易云官网的外链会自动展开目录，而且往下拖动会出现大面积留白的错误，但是这种方法很方便，手机上添加歌曲，网站就可以立即更新。在layout/_macro/sidebar.swig文件下:1234&lt;div id="music163player"&gt; &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=280 height=86 src="//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66"&gt; &lt;/iframe&gt;&lt;/div&gt; Aplayer这个有点难，我综合了两个方案：方案1方案2 下载Aplayer.min.js 打开\themes\next\source\js\src\custom\ 放置APlayer.min.js 打开\themes\next\layout\_custom\ 新建sidebar.swig（也许不用新建？） 写入：1234567891011121314151617181920212223242526&lt;div id="aplayer" class="aplayer"&gt;&lt;/div&gt;&lt;script src="/js/src/custom/APlayer.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;var ap = new APlayer(&#123; element: document.getElementById('aplayer'), // Optional, player element narrow: false, // Optional, narrow style autoplay: false, // Optional, autoplay song(s), not supported by mobile browsers showlrc: 0, // Optional, show lrc, can be 0, 1, 2, see: ###With lrc mutex: true, // Optional, pause other players when this player playing theme: '#e6d0b2', // Optional, theme color, default: #b7daff mode: 'random', // Optional, play mode, can be `random` `single` `circulation`(loop) `order`(no loop), default: `circulation` preload: 'metadata', // Optional, the way to load music, can be 'none' 'metadata' 'auto', default: 'auto' listmaxheight: '513px', // Optional, max height of play list music: [&#123; title: '双笙 囧菌 - 世末歌者', author: '双笙 囧菌', url: 'https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%8F%8C%E7%AC%99%20%E5%9B%A7%E8%8F%8C%20-%20%E4%B8%96%E6%9C%AB%E6%AD%8C%E8%80%85.mp3', pic: 'https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%8F%8C%E7%AC%99%20%E5%9B%A7%E8%8F%8C%20-%20%E4%B8%96%E6%9C%AB%E6%AD%8C%E8%80%85.webp', &#125;, &#123; title: '幹物女(WeiWei)', author: '封茗囧菌', url: 'https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%B0%81%E8%8C%97%E5%9B%A7%E8%8F%8C%20-%20%E5%B9%B9%E7%89%A9%E5%A5%B3(WeiWei).mp3', pic: 'https://qianling-1254036047.cos.ap-chengdu.myqcloud.com/music/%E5%B0%81%E8%8C%97%E5%9B%A7%E8%8F%8C%20-%20%E5%B9%B9%E7%89%A9%E5%A5%B3(WeiWei).webp', &#125;] &#125;);&lt;/script&gt; 为文章摘要设置图片在文章的属性列表中添加photos属性编写的文章属性中photos默认为文章的配图。如这篇文章：12345678---title: Hexo Next如何在文章摘要展示图片date: 2018-07-18 17:43:44tags: Hexocategories: Hexophotos: - &quot;https://faithlove.github.io/pic/2018/HexoThumb/topPicPre.png&quot;--- 在你的正文中使用进行截断由于markdown是支持原生html的，所以我们可以在正文引用img来为我们的文章设置摘要配图,在之前的内容都会展示到摘要中(同时与你主题文件中配置的摘要字数有关).如：123456789---title: Hexo Next如何在文章摘要展示图片date: 2018-07-18 17:43:44tags: Hexocategories: Hexo---&lt;img src=&quot;https://faithlove.github.io/pic/2018/RMTP_1/topPicPre.png&quot; width=50% /&gt;哇，漂亮的小姐姐(❤ ω ❤)&lt;!--more--&gt; 引用链接Markdown语法图床在线编写markdown教程1教程2教程3教程4教程5NexT官网看板娘卖萌颜文字B站教程1 B站教程2 B站教程3]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个简单的微积分证明]]></title>
    <url>%2F2019%2F02%2F12%2F%E5%BE%AE%E7%A7%AF%E5%88%86%E8%AF%81%E6%98%8E%E6%98%BE%E7%A4%BA%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[$以球体内部一点P与球心O的连线为Z轴建立空间直角坐标系$$对于引力微元dF_G，有：$$$dF_G=\frac {GmdM} {r^2}\propto\frac {dM} {r^2}$$$故用\frac {dM} {r^2}表示，又因为存在$$$\boxed{dS=R^2sinψdθdψ}$$$$dM=\frac M {4πR^2} R^2sinψdθdψ=\frac M {4\pi} sinψdθdψ$$$由余弦定理有：\color{blue}r^2=R^2+Z_o^2-2Z_oRcosψ$$而将F_G分解为沿xoy平面和z轴两部分，沿xoy平面之和为0$$$\sum F_{xoy}=0,\sum dF_G=\sum dF_Z$$$dF_Z=dF_Gcos{\alpha}=dF_G\frac {Rcos{alpha}-Z_o} r\propto\frac {dM} {r^2}\frac {Rcos{\alpha}-Z_o} r$$=\frac {Msinψ(Rcosψ-Z_o)dθdψ} {4π(R^2+Z_o^2-2Z_oRcosψ)^{3/2}}$$\Rightarrow F_z=\iint dF_z=\iint \frac {Msinψ(Rcosψ-Z_o)dθdψ} {4π(R^2+Z_o^2-2Z_oRcosψ)^{3/2}}$$=\int _0 ^{2\pi} d\theta \int_0^\pi \frac {Msinψ(Rcosψ-Z_o)} {4π(R^2+Z_o^2-2Z_oRcosψ)^{3/2}}dψ$$=\int_{-1}^1\frac {M(Rx-Z_o)}{2(R^2+Z_o^2-2Z_oRx)^{3/2}}dx$$=\int_{-1}^1-\frac M{2Z_oR}(Rx-Z_o)d(R^2+Z_o^2-2Z_oRx)^{-1/2}$$=-\frac M{2Z_oR}[(Rx-Z_o)(R^2+Z_o^2-2Z_oRx)^{-1/2}]|_{-1} ^1+\frac M{2Z_oR}\int _{-1}^1(Z_o^2+R^2-2Z_oRx)d(Rx-Z_o)$$=-\frac M{2Z_oR}[(Rx-Z_o)(R^2+Z_o^2-2Z_oRx)^{-1/2}]|_{-1} ^1-\frac M{4Z_o^2R}\int_{-1} ^1(Z_o^2+R^2-2Z_oRx)^{-1/2}d(Z_o^2+R^2-2Z_oRx)$$=-\frac M{2Z_oR}[(Rx-Z_o)(R^2+Z_o^2-2Z_oRx)^{-1/2}]|_{-1} ^1-\frac M{4Z_o^2R}\int_{-1} ^1(Z_o^2+R^2-2Z_oRx)^{1/2}|_{-1} ^1$$=-\frac M{2Z_oR}[(Rx-Z_o-\frac {Z_o^2+R^2-2Z_oRx} {2Z_o})(Z_o^2+R^2-2Z_oRx)^{-1/2}]|_{-1}^1$$=-\frac M{2Z_oR}[(Rx-Rx)(Z_o^2+R^2-2Z_oRx)^{-1/2}]|_{-1}^1$$=\color{red}0$$证明完毕$]]></content>
      <tags>
        <tag>Mathjax显示测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法简明介绍]]></title>
    <url>%2F2019%2F02%2F10%2FMarkown%E8%AF%AD%E6%B3%95%E7%AE%80%E6%98%8E%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[Markdown是一种轻量级标记语言，创始人为約翰·格魯伯（英语：John Gruber）。 它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档”。 强调使用星号*或者下划线_，单是斜体，双是粗体，三个是斜粗体。123456*我们曾经终日游荡在故乡的青山上*_我们也曾经终日逍遥荡桨在绿波上_**我们曾经终日游荡在故乡的青山上**__我们也曾经终日逍遥荡桨在绿波上__***我们曾经终日游荡在故乡的青山上***___我们也曾经终日逍遥荡桨在绿波上___ 我们曾经终日游荡在故乡的青山上我们也曾经终日逍遥荡桨在绿波上我们曾经终日游荡在故乡的青山上我们也曾经终日逍遥荡桨在绿波上我们曾经终日游荡在故乡的青山上我们也曾经终日逍遥荡桨在绿波上 分割线三个及以上的-_*，单独一行，这里面不好展示，手机上会显示成居中的三个点，希望主题作者能修复bug吧。123---___*** 引用使用&gt;，使用两个可以表示多重引用，注意空格。12&gt; For auld lang syne&gt;&gt; my dear For auld lang syne my dear 标题Setext方式这种方式感觉用的比较少吧。1234大标题===小标题--- 大标题小标题Atx方式众所周知。123456# 室女超星系群## 本星系群### 银河系#### 猎户臂-古尔德带##### 太阳系###### 地球 室女超星系群本星系群银河系猎户臂-古尔德带太阳系地球列表无序列表使用-+*，注意空格，不能混合（易于嵌套列表搞混）。123- 宇宙+ 可观测宇宙* Laniakea超星系群 宇宙 可观测宇宙 Laniakea超星系群 有序列表使用数字123…加点.加空格的形式，数字可以无序但Markdown官方建议使用有序排列因为不排除未来仅支持有序。123451. つまり学校を卒業した後は2. 愛国精神をもって3. みんなで国を守ろう4. そういう歌だったんですね5. 日本の国土をどんどんど広げていきます つまり学校を卒業した後は 愛国精神をもって みんなで国を守ろう そういう歌だったんですね 日本の国土をどんどんど広げていきます 嵌套列表-+*可以循环使用，不可以缺少空格，实际显示只能显示两层，尴尬。12345- 嵌套列表1+ 嵌套列表2* 嵌套列表3+ 嵌套列表4+ 嵌套列表5 嵌套列表1 嵌套列表2 嵌套列表3 嵌套列表4 嵌套列表5 超链接文字超链接1[Ju5tice](www.jinhuaixin.cn &quot;我的博客网站&quot;) Ju5tice 图片超链接1![电子科技大学图书馆](http://www.lib.uestc.edu.cn/newsiconcat/1461128021267.jpg &quot;UESTC&quot;) 索引超链接感觉没怎么用过啊，“1”可以指代任意字符。12345[Ju5tice][1][1]:www.jinhuaixin.cn[[1]Ju5tice][[1]][[1]]: http://www.jinhuaixin.cn &quot;Ju5tice&quot; [Ju5tice][1][1]:www.jinhuaixin.cn 自动超链接这个感觉还是HTML标签的作用，不太清楚。12&lt;https://www.jinhuaixin.cn&gt;&lt;208766617@qq.com&gt; &lt;www.jinhuaixin.cn&gt;&#50;&#48;&#x38;&#x37;&#54;&#x36;&#54;&#49;&#55;&#64;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d; 代码这有啥好说的。。。123456789101112131415def stable_match(men, women):free_men = deque(men)engaged = defaultdict(lambda: None)while free_men:i = free_men.popleft()# man proposes women according his preferencesfor j in men[i]:preference = women[j].indexfiance = engaged[j]# woman accepts the better offerif not fiance or preference(i) &lt; preference(fiance):engaged[j] = ifiance and free_men.append(fiance)breakreturn [(m, w) for w, m in engaged.items()] 注释Markdown里面的注释基本是基于HTML标签的，反正也不会在页面显示。123456&lt;!-- 注释 --&gt;&lt;div style=&apos;display: none&apos;&gt;哈哈我是注释，不会在浏览器中显示。我也是注释。&lt;/div&gt; 哈哈我是注释，不会在浏览器中显示。我也是注释。&lt;—-比如这里有个注释但你看不见 还有hack方法等等几种，但是比较繁琐了。 转义字符12345678910111213\\ 反斜杠\` 反引号\* 星号\_ 下划线\&#123;\&#125; 大括号\[\] 中括号\(\) 小括号\# 井号\+ 加号\- 减号\. 英文句号\! 感叹号 \ 反斜杠` 反引号* 星号_ 下划线{} 大括号[] 中括号() 小括号# 井号+ 加号- 减号. 英文句号! 感叹号 表格这个打表方法一堆人说好用，但对于我这种word用惯了的人来说真费劲啊。1234567891011| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 |项目 | 价格-------- | ---Computer | $1600Phone | $12Pipe | $1 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 项目 价格 Computer $1600 Phone $12 Pipe $1 其他段落缩进1234半方大的空白 或 看，飞碟全方大的空白 或 看，飞碟不断行的空白格 或 看，飞碟 段落从此开始。 半方大的空白 或 看，飞碟全方大的空白 或 看，飞碟不断行的空白格 或 看，飞碟 段落从此开始。 字体、字号、颜色1234567&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;&lt;font color=#00ffff size=3&gt;null&lt;/font&gt;&lt;font color=gray size=5&gt;gray&lt;/font&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#FF00FF&gt;背景色的设置是按照十六进制颜色值：#7FFFD4&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 我是黑体字 我是微软雅黑 我是华文彩云 黑体 null gray 背景色的设置是按照十六进制颜色值：#7FFFD4]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
